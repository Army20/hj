## 牛客网-华为机试练习题 58

### 题目描述

*   首先输入要输入的整数个数n，然后输入n个整数。输出为n个整数中负数的个数，和所有正整数的平均值，结果保留一位小数。

0即不是正整数，也不是负数，不计入计算。如果没有正数，则平均值为0。

数据范围： 1≤n ≤2000  ，输入的整数都满足 ∣val∣≤1000 


### 输入描述:

+   首先输入一个正整数n，
    然后输入n个整数。

### 输出描述:

*  输出负数的个数，和所有正整数的平均值。

### 示例1

```
输入：

11 
1 2 3 4 5 6 7 8 9 0 -1

输出：
1 2
```
### 示例2

```
输入：
3
0 0 0

输出：
0 0.0
```
### 思路
*   
### 代码

```Java
package com.example.hj;

import java.text.DecimalFormat;
import java.util.Scanner;

/**
 * 功能描述
 *
 * @author zWX1011101
 * @since 2022-05-27
 */
public class HJ97 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int n = scanner.nextInt();
            int negativeNumber = 0;
            int positiveNumber = 0;
            int positiveSum = 0;
            for (int i = 0; i < n; i++) {
                int num = scanner.nextInt();
                if (num < 0) {
                    negativeNumber++;
                } else if (num > 0) {
                    positiveNumber++;
                    positiveSum += num;
                } else {
                    continue;
                }
            }
            if (positiveSum == 0) {
                System.out.println(negativeNumber + " " + 0.0);
            } else {
              /*  DecimalFormat decimalFormat = new DecimalFormat("0.0");
                System.out.println(negativeNumber + " " + decimalFormat.format((float) positiveSum / positiveNumber));*/
                System.out.println(negativeNumber + " " + String.format("%.1f", (float) positiveSum / positiveNumber));
            }
        }
    }
}


```
### 总结
    字符串格式显示：参考链接：https://blog.csdn.net/anita9999/article/details/82346552
```Java  
    
    保留一位小数：
    System.out.println(String.format("%.1f", 20f));
    System.out.println(String.format("%f", 20f));
    
    输出：
    0 20.0
    0 20.000000
    
    保留一位小数：
     DecimalFormat decimalFormat = new DecimalFormat("0.0");
     System.out.println(decimalFormat.format(20.12));
     
     输出：
     20.1
```
  
